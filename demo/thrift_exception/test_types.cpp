/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "stdafx.h"

#include "stdafx.h"
#include "test_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace THRIFT {


Error::~Error() throw() {
}


void Error::__set__message(const std::string& val) {
  this->_message = val;
}

const char* Error::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t Error::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t Error::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_message);
          this->__isset._message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Error::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Error");

  xfer += oprot->writeFieldBegin("_message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Error &a, Error &b) {
  using ::std::swap;
  swap(a._message, b._message);
  swap(a.__isset, b.__isset);
}

Error::Error(const Error& other0) : TException() {
  _message = other0._message;
  __isset = other0.__isset;
}
Error& Error::operator=(const Error& other1) {
  _message = other1._message;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Error& obj) {
  using apache::thrift::to_string;
  out << "Error(";
  out << "_message=" << to_string(obj._message);
  out << ")";
  return out;
}

} // namespace
