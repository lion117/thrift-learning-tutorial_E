// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "stdafx.h"
#include <iostream>
#include "RPCNetwork.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "test_types.h"
#include "Poco/Thread.h"
using namespace Poco;

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::THRIFT;

class RPCNetworkHandler : virtual public RPCNetworkIf {
 public:
  RPCNetworkHandler() {
    // Your initialization goes here
  }

  void sayHi(std::string& _return) {
	  // Your implementation goes here
	  printf("sayHi\n");
	  static bool is_single = false;
	  if (is_single)
	  {
		  is_single = false;
		  std::string i_msg = "thrift thow exception : hello world";
		  THRIFT::Error  i_ex;
		  i_ex.__set__message(i_msg);
		  throw i_ex;
	  }
	  else
	  {
		  is_single = true;
		  std::cout << "no exception throw " << std::endl;
	  }
  }
};

int main(int argc, char **argv) {

	std::cout << "server : port 8081" << std::endl;
  int port = 8081;
  shared_ptr<RPCNetworkHandler> handler(new RPCNetworkHandler());
  shared_ptr<TProcessor> processor(new RPCNetworkProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  Poco::Thread i_thread_handle;
  i_thread_handle.startFunc([&]
  {
	  server.serve();
  });

  i_thread_handle.join();
  std::system("pause");
  return 0;
}

