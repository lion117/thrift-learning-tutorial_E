/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCNetwork_H
#define RPCNetwork_H

#include <thrift/TDispatchProcessor.h>
#include "test_types.h"

namespace THRIFT {

class RPCNetworkIf {
 public:
  virtual ~RPCNetworkIf() {}
  virtual void sayHi(std::string& _return) = 0;
};

class RPCNetworkIfFactory {
 public:
  typedef RPCNetworkIf Handler;

  virtual ~RPCNetworkIfFactory() {}

  virtual RPCNetworkIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCNetworkIf* /* handler */) = 0;
};

class RPCNetworkIfSingletonFactory : virtual public RPCNetworkIfFactory {
 public:
  RPCNetworkIfSingletonFactory(const boost::shared_ptr<RPCNetworkIf>& iface) : iface_(iface) {}
  virtual ~RPCNetworkIfSingletonFactory() {}

  virtual RPCNetworkIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCNetworkIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCNetworkIf> iface_;
};

class RPCNetworkNull : virtual public RPCNetworkIf {
 public:
  virtual ~RPCNetworkNull() {}
  void sayHi(std::string& /* _return */) {
    return;
  }
};


class RPCNetwork_sayHi_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCNetwork_sayHi_args(const RPCNetwork_sayHi_args&);
  RPCNetwork_sayHi_args& operator=(const RPCNetwork_sayHi_args&);
  RPCNetwork_sayHi_args() {
  }

  virtual ~RPCNetwork_sayHi_args() throw();

  bool operator == (const RPCNetwork_sayHi_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCNetwork_sayHi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCNetwork_sayHi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCNetwork_sayHi_args& obj);
};


class RPCNetwork_sayHi_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCNetwork_sayHi_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCNetwork_sayHi_pargs& obj);
};

typedef struct _RPCNetwork_sayHi_result__isset {
  _RPCNetwork_sayHi_result__isset() : success(false), me(false) {}
  bool success :1;
  bool me :1;
} _RPCNetwork_sayHi_result__isset;

class RPCNetwork_sayHi_result {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};

  RPCNetwork_sayHi_result(const RPCNetwork_sayHi_result&);
  RPCNetwork_sayHi_result& operator=(const RPCNetwork_sayHi_result&);
  RPCNetwork_sayHi_result() : success() {
  }

  virtual ~RPCNetwork_sayHi_result() throw();
  std::string success;
  Error me;

  _RPCNetwork_sayHi_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_me(const Error& val);

  bool operator == (const RPCNetwork_sayHi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(me == rhs.me))
      return false;
    return true;
  }
  bool operator != (const RPCNetwork_sayHi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCNetwork_sayHi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCNetwork_sayHi_result& obj);
};

typedef struct _RPCNetwork_sayHi_presult__isset {
  _RPCNetwork_sayHi_presult__isset() : success(false), me(false) {}
  bool success :1;
  bool me :1;
} _RPCNetwork_sayHi_presult__isset;

class RPCNetwork_sayHi_presult {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};


  virtual ~RPCNetwork_sayHi_presult() throw();
  std::string* success;
  Error me;

  _RPCNetwork_sayHi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RPCNetwork_sayHi_presult& obj);
};

class RPCNetworkClient : virtual public RPCNetworkIf {
 public:
  RPCNetworkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCNetworkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHi(std::string& _return);
  void send_sayHi();
  void recv_sayHi(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCNetworkProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCNetworkIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCNetworkProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sayHi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCNetworkProcessor(boost::shared_ptr<RPCNetworkIf> iface) :
    iface_(iface) {
    processMap_["sayHi"] = &RPCNetworkProcessor::process_sayHi;
  }

  virtual ~RPCNetworkProcessor() {}
};

class RPCNetworkProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCNetworkProcessorFactory(const ::boost::shared_ptr< RPCNetworkIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCNetworkIfFactory > handlerFactory_;
};

class RPCNetworkMultiface : virtual public RPCNetworkIf {
 public:
  RPCNetworkMultiface(std::vector<boost::shared_ptr<RPCNetworkIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCNetworkMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCNetworkIf> > ifaces_;
  RPCNetworkMultiface() {}
  void add(boost::shared_ptr<RPCNetworkIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sayHi(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sayHi(_return);
    }
    ifaces_[i]->sayHi(_return);
    return;
  }

};

} // namespace

#endif
